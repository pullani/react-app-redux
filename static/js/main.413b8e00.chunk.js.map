{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","idx","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","padding","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.413b8e00.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div className='tc grow bg-light-green br3 pa0 ma2 dib bw2 shadow-5'>\n            <img alt=\"robots\" src={`https://robohash.org/${props.id}?200x200`} />\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n        {\n            robots.map((user , idx) => {\n                //Unique and static key is required for each child in an iterator/array.\n                //This will help react to keep track of each comonent.\n                return (\n                    <Card \n                    key={idx} \n                    id={robots[idx].id} \n                    name={robots[idx].name} \n                    email={robots[idx].email}\n                    />\n                );\n            })\n        }\n        </div>\n    );\n}\n\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='tc pa2'>\n            <input \n                className='tc pa3 br3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search Names' \n                onChange={searchChange} //HTML inbuilt\n            />\n        </div>\n        \n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '0px solid black', height: '600px', padding:'20px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n\n\n// For instructor version: https://github.com/aneagoie/robofriends\n\nimport { setSearchField, requestRobots } from '../actions'\n\n//Callback function to onRequestRobots()\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    console.log(robots);\n    \n    const filteredRobots = robots.filter(robot => {\n      //console.log(\"helooo\" , robot.name);\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    if (robots.length === 0){\n      return <h1 className='f2 tc'>RoboFriends Loading...</h1>\n    } \n\n    return isPending ? \n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <h1 className='f1'>No matching results!</h1>\n          </Scroll>\n        </div>\n      ) :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={ filteredRobots }/>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// This will check for any changes in redux store.","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\n\nexport const setSearchField = (text) => {\n    //console.log(text);\n    return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://raw.githubusercontent.com/pullani/react-app/master/userdoc')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n//Since it is a promise at fetch() call. We define 3 states.\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = ( state=initialStateSearch, action={}) => {\n    //console.log(action.type)\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'; //npm install --save redux-logger\nimport thunkMiddleWare from 'redux-thunk';\nimport './index.css';\nimport  App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare,logger))\n\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root')\n                );\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}